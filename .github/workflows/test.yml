name: testflows

on:
  workflow_dispatch:
  # schedule:
    # - cron: 0 18 * * *

env:
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Rockchip
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 2048
        # remove-dotnet: 'true'
        # remove-android: 'true'
        # remove-haskell: 'true'
        # remove-codeql: 'true'
        # remove-docker-images: 'true'

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT
      
    - name: 初始化编译环境(Initialization Environment)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E apt -yqq install dos2unix libfuse-dev
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"
        # sudo mkdir -p /workdir
        # sudo chown $USER:$GROUPS /workdir
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$USER /mnt/workdir
        
        # 获取固件所属的平台
        export WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' $CONFIG_FILE | tr '[:lower:]' '[:upper:]')
        echo "WRT_TARGET=$WRT_TARGET" >> $GITHUB_ENV
        echo "编译的固件所属平台为：$WRT_TARGET"